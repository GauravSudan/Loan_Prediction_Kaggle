import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


data = pd.read_csv('CORRECTED_FILE.csv')


data.dtypes

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()

var_mod = ['Loan_ID','Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status','LoanAmount','CoapplicantIncome','Loan_Amount_Term']
for i in var_mod:
    data[i]=labelencoder_X.fit_transform(data[i])

data.dtypes

X = data.iloc[:, 1:12].values
Y = data.iloc[:, 12].values
Y1=np.array(Y)
Y1=np.reshape(Y1,(len(Y1),1))
#splitting the dataset to training set and test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25, random_state =0)

#Fitting Logistic regression to training set              #Accuracy=81%
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train,y_train)


#K FOLD
from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X=X_train , y=y_train,cv = 10)
accuracies.mean()
accuracies.std()

print(accuracies.mean())
print(accuracies.std())

#PRedicting test set values
y_pred = classifier.predict(X_test)

#Making the confusion matrix
from sklearn.metrics import confusion_matrix   #It is a fun not a class
cm = confusion_matrix(y_test, y_pred )  # B/w actual and predicted values
print(cm)

print(((cm[0][0]+cm[1][1])/y_test.size)*100)
